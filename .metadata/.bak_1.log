!SESSION 2022-08-22 11:42:54.757 -----------------------------------------------
eclipse.buildId=4.22.0.I20211124-1800
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\Win10\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2022-08-22 12:16:33.986

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-22 12:16:33.987
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-22 12:16:33.989
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-22 12:16:34.995
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak==0) 
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak==0 ) {
			return false;
		}
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-22 12:16:34.995
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-22 12:16:34.997
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:05.603
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:05.652
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:05.653
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:09.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak k.podatak<max_vr(k.desno))) {
			return false;
		}
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:09.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:09.682
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:23.272
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)))) {
			return false;
		}
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:23.274
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:23.277
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:26.299
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:26.300
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:26.301
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:32.819
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:32.821
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:32.823
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:35.341
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return 
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:35.342
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:35.343
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:36.850
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return av
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:36.850
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:36.851
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:37.861
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return avl
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:37.862
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:37.864
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:40.387
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:40.388
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:40.389
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:42.403
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:42.405
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:42.405
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:44.925
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&avl
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:44.926
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:44.926
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:46.942
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno)
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:46.944
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:46.945
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:47.956
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	}
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:47.956
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:47.957
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:49.967
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:49.968
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:49.969
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:54.507
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-23 15:13:54.510
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-23 15:13:54.512
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:56.347
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-23 15:13:56.348
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-23 15:13:56.349
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:57.486
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:57.487
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:57.487
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:13:58.494
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:13:58.495
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:13:58.497
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:14:08.523
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);

	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:14:08.524
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:14:08.526
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:14:11.537
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
			
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:14:11.538
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:14:11.539
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:14:11.752
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
			
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-23 15:14:11.753
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-23 15:14:11.754
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:14:13.045
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:14:13.046
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:14:13.047
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:16:58.861
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean 
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:16:58.865
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:16:58.866
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:03.411
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(cvor)
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:03.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:03.415
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:04.935
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k)
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:04.936
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:04.937
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:06.448
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:06.449
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:06.450
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:13.962
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:13.963
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:13.964
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:19.481
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:19.483
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:19.483
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:20.491
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:20.492
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:20.493
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:27.008
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if()
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:27.009
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:27.010
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:30.022
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(kore)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:30.022
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:30.023
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:33.032
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:33.036
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:33.036
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:39.546
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:39.547
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:39.547
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:47.559
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:47.560
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:47.561
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:49.066
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak) {
			
		}
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:49.067
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:49.068
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:52.078
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak) {
			return false;
		}
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:52.082
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:52.082
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:58.096
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak) {
			return false;
		}
		return 
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:58.097
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:58.097
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:17:59.605
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:17:59.605
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:17:59.606
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:21.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<k.podatak) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-23 15:18:21.715
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-23 15:18:21.716
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:22.628
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<m) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:18:22.629
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:18:22.630
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:24.640
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:18:24.641
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:18:24.641
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:26.153
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:18:26.154
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:18:26.154
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:28.165
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:18:28.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:18:28.168
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:40.186
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:18:40.187
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:18:40.188
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:18:57.155
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-23 15:18:57.156
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-23 15:18:57.157
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:19:06.774
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap(k.levo)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:19:06.775
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:19:06.775
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:19:09.789
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap(k.levo)&&heap
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:19:09.790
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:19:09.791
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:19:11.806
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap(k.levo)&&heap(k.desno)
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:19:11.807
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:19:11.808
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:19:13.329
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap(k.levo)&&heap(k.desno);
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-08-23 15:19:13.331
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-08-23 15:19:13.332
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-23 15:19:17.242
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import javax.sql.PooledConnection;

import labis.cvorovi.CvorStabla;
import labis.stabla.ABinarnoStablo;

public class stabla4 extends ABinarnoStablo {
	public int broj(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+broj(k.levo)+broj(k.desno);
	}
	public int zbir(CvorStabla k) {
		if(k==null) {
			return 0;
		}
	return 	k.podatak+  zbir(k.levo)+zbir(k.desno);
	}
	public int zbir_parnih(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.podatak%2==0) {
			return k.podatak+zbir_parnih(k.levo)+zbir_parnih(k.desno);
		}
		return zbir_parnih(k.levo)+zbir_parnih(k.desno);
	}
	public int proizvod_pozitivnih_trocifrenih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(k.podatak>99 && k.podatak<1000) {
			return k.podatak*proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_pozitivnih_trocifrenih(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public int broj_neparnih_listova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if(k.levo== null && k.desno==null && k.podatak%2!=0) {
			return 1+broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
		}
		return broj_neparnih_listova(k.levo)+broj_neparnih_listova(k.desno);
	}
	public int zbir_negativnih_polulistova(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo==null) != (k.desno==null) && k.podatak<0) {
			return k.podatak+zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
		}
		return zbir_negativnih_polulistova(k.levo)+zbir_negativnih_polulistova(k.desno);
	
	}
	public int proizvod_un_deca_listovi(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if((k.levo!=null && k.desno!=null) && 
				(k.levo.levo==null && k.levo.desno==null) && (k.desno.desno==null&& k.desno.levo==null)) {
			return k.podatak*proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
		}
		return proizvod_un_deca_listovi(k.levo)*proizvod_pozitivnih_trocifrenih(k.desno);
	}
	public boolean prost(int p) {
		int brojac=0;
		for (int i = 1; i <=p; i++) {
			if(p%i==0) {
				brojac++;
			}
		}
		return brojac==2;
	}
	public int proizvod_prostih(CvorStabla k) {
		if(k==null) {
			return 1;
		}
		if(prost(k.podatak)) {
			return k.podatak*proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
		}
		return proizvod_prostih(k.levo)*proizvod_prostih(k.desno);
	}
	public int zbir_deljivih_bar_jednim_detetom(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		if((k.levo!=null && k.podatak%k.levo.podatak==0) ||
				(k.desno!=null && k.podatak%k.desno.podatak==0)) {
			return k.podatak+zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
		}
		return zbir_deljivih_bar_jednim_detetom(k.levo)+zbir_deljivih_bar_jednim_detetom(k.desno);
	}
	public boolean postoji(CvorStabla k,int p) {
		if(k==null) {
			return false;
		}
		if(k.podatak==p) {
			return true;
		}
		return postoji(k.levo, p) || postoji(k.desno, p);
	}
	public boolean postoji_cvor_u_stablu(CvorStabla k, CvorStabla c) {
		if(k==null || c==null) {
			return false;
		}
		if(k==c) {
			return true;
		}
		return postoji_cvor_u_stablu(k.levo, c) || postoji_cvor_u_stablu(k.desno, c);
	}
	public boolean postoji_neparan_list(CvorStabla k) {
		if(k==null) {
			return false;
		}
		if(k.levo==null && k.desno==null && k.podatak%2!=0) {
			return true;
		}
		return postoji_neparan_list(k.levo)||postoji_neparan_list(k.desno);
	}
	public boolean svaki_polulist_ima_parno_dete(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.desno==null && k.levo.podatak%2!=0)
				|| (k.desno!=null && k.levo==null && k.desno.podatak%2!=0)) {
			return false;
		}
		return svaki_polulist_ima_parno_dete(k.levo)&&svaki_polulist_ima_parno_dete(k.desno);
	}
	public boolean svi_pozitivni(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.podatak<0) {
			return false;
		}
		return svi_pozitivni(k.levo)&&svi_pozitivni(k.desno);
	}
	public boolean svi_listovi_deljivi_roditeljem(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if((k.levo!=null && k.levo.levo==null && k.levo.desno==null && k.levo.podatak%k.podatak!=0) ||
			(k.desno!=null && k.desno.levo==null && k.desno.desno==null && k.desno.podatak%k.podatak!=0)) {
			return false;
		}
		return svi_listovi_deljivi_roditeljem(k.levo)&& svi_listovi_deljivi_roditeljem(k.desno);
	}
	public boolean svi_unutrasnji_deljivi_korenom(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(k.levo!=null && k.desno!=null && k.podatak%koren.podatak!=0) {
			return false;
		}
		return svi_unutrasnji_deljivi_korenom(k.levo)&&svi_unutrasnji_deljivi_korenom(k.desno);
	}
	public int max_vr(CvorStabla k) {
		if(k==null) {
			return Integer.MIN_VALUE;
		}
		return Math.max(k.podatak, Math.max(max_vr(k.levo), max_vr(k.desno)));
	}
	public CvorStabla min(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=k;
		CvorStabla l= min(k.levo);
		CvorStabla d= min(k.desno);
		if(l!=null && l.podatak<min.podatak) {
			min=l;
		}
		if(d!=null && d.podatak<min.podatak) {
			min=d;
		}
		return min;
	}
	public CvorStabla min_pozitivan(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla min=null;
		CvorStabla l= min_pozitivan(k.levo);
		CvorStabla d= min(k.desno);
		if(l.podatak>0) {
			min=l;
		}
		if(l!=null && (min==null || l.podatak<min.podatak)) {
			min=l;
		}
		if(d!=null &&(min==null || d.podatak<min.podatak)) {
			min=d;
		}
		return min;
		
	}
	public CvorStabla pronadji(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		CvorStabla l=pronadji(k.levo, p);
		CvorStabla d= pronadji(k.desno, p);
	 if(l!=null) {
		 return l;
	 }
	 return d;
	}
	public CvorStabla pronadjiBST(CvorStabla k, int p) {
		if(k==null) {
			return null;
		}
		if(k.podatak==p) {
			return k;
		}
		if(k.podatak<p) {
			return pronadjiBST(k.levo, p);
		}
		return pronadjiBST(k.desno, p);
	}
	public CvorStabla roditelj(CvorStabla k, CvorStabla c) {
		if(k==null || c==null || k==c) {
			return null;
		}
		if(k.levo==c || k.desno==c) {
			return k;
		}
		CvorStabla l= roditelj(k.levo, c);
		CvorStabla d= roditelj(k.desno, c);
		if(l!=null) {
			return l;
		}
		return d;
	}
	public int visina(CvorStabla k) {
		if(k==null) {
			return 0;
		}
		return 1+Math.max(visina(k.levo), visina(k.desno));
	}
	public int nivo(CvorStabla k, CvorStabla c) {
		if(k== null || c==null || !postoji_cvor_u_stablu(k, c)) {
			return 0;
		}
		if(k==c) {
			return 1;
		}
		if(postoji_cvor_u_stablu(k.levo, c)) {
			return 1+nivo(k.levo, c);
		}
		return 1+nivo(k.desno, c);
	}
	public CvorStabla maxPolulist(CvorStabla k) {
		if(k==null) {
			return null;
		}
		CvorStabla max=null;
		if((k.levo==null) != (k.desno==null)) {
			max=k;
		}
		CvorStabla l= maxPolulist(k.levo);
		CvorStabla d= maxPolulist(k.desno);
		if(l!=null && (max==null || l.podatak>max.podatak)) {
			max=l;
		}
		if(d!=null && (max==null || d.podatak>max.podatak)) {
			max=d;
		}
		return max;
	}
	public CvorStabla najdublji_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		if(visina(k.levo)>visina(k.desno)) {
			return najdublji_list(k.levo)
					;
		}
		return najdublji_list(k.desno);
	}
	public CvorStabla najplici_list(CvorStabla k) {
		if(k==null) {
			return null;
		}
		if(k.levo==null && k.desno==null) {
			return k;
		}
		CvorStabla l= najdublji_list(k.levo);
		CvorStabla d= najplici_list(k.desno);
		if(l==null) {
			return d;
		}
		if(d==null) {
			return l;
		}
		if(nivo(k, l)<nivo(k, d)) {
			return l;
		} else {
			return d;
		}
	}
	public void ispisi_polulistove_na_nivou(CvorStabla k, int n) {
		if(k==null || n<1) {
			return;
		}
		if((k.levo==null)!=(k.desno==null) && nivo(koren, k)==n) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_na_nivou(k.levo, n);
		ispisi_polulistove_na_nivou(k.desno, n);
	}
	public void ispisi(CvorStabla k) {
		if(k==null) {
			return;
		}
		System.out.print("  "+k.podatak);
		ispisi(k.levo);
		ispisi(k.desno);
	}
	public void ispisi_polulistove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_polulistove_rastuce(k.levo);
		if((k.levo==null)!=(k.desno==null)) {
			System.out.println(k.podatak);
		}
		ispisi_polulistove_rastuce(k.desno);
		
	}
	public void iste_parnosti_kao_koren(CvorStabla k) {
		if(k==null) {
			return;
		}
		iste_parnosti_kao_koren(k.desno);
		if((k.podatak%2==0 && koren.podatak%2==0) ||
				(k.podatak%2!=0 && koren.podatak%2!=0)) {
			System.out.println(k.podatak);
		}
		iste_parnosti_kao_koren(k.levo);
	}
	public void ispisi_sve_parne_listove_rastuce(CvorStabla k) {
		if(k==null) {
			return;
		}
		ispisi_sve_parne_listove_rastuce(k.levo);
		if(k.podatak%2==0 && k.levo==null && k.desno==null) {
			System.out.println(k.podatak);
		}
		ispisi_sve_parne_listove_rastuce(k.desno);
	}
	public void tri_puta_vece_u_levom_nego_u_desnom(CvorStabla k) {
		if(k==null) {
			return;
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.desno);
		if(broj(k.levo)==3*broj(k.desno)) {
			System.out.println(k.podatak);
		}
		tri_puta_vece_u_levom_nego_u_desnom(k.levo);
	}
	public boolean balansirano(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1) {
			return false;
		}
		return balansirano(k.levo)&&balansirano(k.desno);
	}
	public boolean kompletno(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(visina(k.levo) != visina(k.desno)) {
			return false;
		}
		return kompletno(k.levo)&&kompletno(k.desno);
	}
	public boolean BST(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(!(max_vr(k.levo)<k.podatak && k.podatak<max_vr(k.desno))) {
			return false;
		}
		return BST(k.levo)&&BST(k.desno);
	}
	public boolean AVL(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(Math.abs(visina(k.levo)-visina(k.desno))>1)  
			|| ((max_vr(k.levo)>k.podatak || k.podatak>max_vr(k.desno)) {
			return false;
		}
			return AVL(k.levo)&&AVL(k.desno);
	public boolean heap(CvorStabla k) {
		if(k==null) {
			return true;
		}
		if(koren.podatak<max_vr(k)) {
			return false;
		}
		return heap(k.levo)&&heap(k.desno);
	}
	}
	
} 

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2693)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2243)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3037)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
